
////
/// @group map
////


/// Test if map got all `$keys` nested with each others
///
/// map-has-nested-keys
///
/// @author Hugo Giraudel
///
/// @param {map} $map - Map
/// @param {arglist} $keys - Keys to test
/// @return {bool}
///
@function map-has-nested-keys($map, $keys...) {

    @each $key in $keys {

        @if not map-has-key($map, $key) {
            @return false;
        }

        $map: map-get($map, $key);
    }

    @return true;
}

/// jQuery-style extend function
///
/// map-extend
///
/// About `map-merge()`:
/// * only takes 2 arguments
/// * is not recursive
///
/// @param {map} $map - First map
/// @param {arglist} $maps - Other maps
/// @param {bool} $deep - Recursive mode
/// @return {map}
///
@function map-extend($map, $maps.../*, $deep */) {
    $last: nth($maps, -1);
    $deep: $last == true;
    $max: if($deep, length($maps) - 1, length($maps));

    // Loop through all maps in $maps...
    @for $i from 1 through $max {
        // Store current map
        $current: nth($maps, $i);

        // If not in deep mode, simply merge current map with map
        @if not $deep {
            $map: map-merge($map, $current);

        } @else {

            // If in deep mode, loop through all tuples in current map
            @each $key, $value in $current {

                // If value is a nested map and same key from map is a nested map as well
                @if type-of($value) == 'map' and type-of(map-get($map, $key)) == 'map' {
                    // Recursive extend
                    $value: map-extend(map-get($map, $key), $value, true);
                }

                // Merge current tuple with map
                $map: map-merge($map, ($key: $value));
            }
        }
    }

    @return $map;
}
