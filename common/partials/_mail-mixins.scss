// ----------------------------------------------------------------------------------------------------------
// C O M M O N   M A I L   M I X I N S
// ----------------------------------------------------------------------------------------------------------

/// Set different color schemes for the footer.
///
/// @param {map} $scheme - Color scheme.
///
@mixin set-footer-style($scheme) {
    background-color: get('background-color', $scheme);

    .footer-head {
        border-top: 1px solid get('head.border-top', $scheme);
        border-bottom: 1px solid get('head.border-bottom', $scheme);
        background-color: get('head.background-color', $scheme);
    }

    .footer-nav,
    .footer-disclaimer,
    .footer-collaborators,
    .footer-address {

        p,
        span,
        a {
            color: get('color', $scheme);

            @include mail-font(get('font-size', $scheme), 1.45);
        }
    }

    .footer-nav {

        p,
        span,
        a {
            color: get('nav.color', $scheme);
        }
    }

    .footer-address {

        p,
        span,
        a {
            @include mail-font(get('font-size', $scheme), $weight: get('address.font-weight', $scheme));
        }
    }
}

/// Sets the shorthand `font` property.
///
/// @param {number} $size [$mail-global-font-size] - Size value.
/// @param {number} $line-height [$mail-global-line-height] - Line-height value.
/// @param {number|string} $weight [''] - Weight value.
/// @param {string} $style [''] - Style value.
/// @param {string} $variant [''] - Variant value, one of `normal` or `small-caps`.
/// @param {string} $stretch [''] - Stretch value.
/// @param {string|list} $family [$mail-global-font-family] - Family, string or a list with strings.
///
@mixin mail-font($size: $mail-global-font-size, $line-height: $mail-global-line-height, $weight: '', $style: '', $variant: '', $stretch: '', $family: $mail-global-font-family) {
    font: shorthand-font($style, $variant, $weight, $stretch, $size, $line-height, $family);
}

/// Sets the responsive classes of an specific box-model property.
///
/// @param {string} $property - CSS box-model property.
/// @param {number} $value - CSS value.
/// @param {boolean} $horizontal [true] - Whether or not to include classes to modify left and right values.
/// @param {boolean} $vertical [true] - Whether or not to include classes to modify top and bottom values.
///
@mixin set-responsive-reseters($property, $value, $horizontal: true, $vertical: true) {
    @each $side in 'top', 'right', 'bottom', 'left' {

        &-#{$side} {
            #{$property}-#{$side}: $value !important;
        }
    }

    @if $horizontal {

        &-horizontal-sides {
            #{$property}-right: $value !important;
            #{$property}-left: $value !important;
        }
    }

    @if $vertical {

        &-vertical-sides {
            #{$property}-top: $value !important;
            #{$property}-bottom: $value !important;
        }
    }
}
