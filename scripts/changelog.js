// ----------------------------------------------------------------------------------------------------------
// C R E A T E   C H A N G E L O G
// ----------------------------------------------------------------------------------------------------------

'use strict';

// SYSTEM MODULES
// --------------
const cwd = process.cwd();
const path = require('path');

// CUSTOM PACKAGES
// ---------------
const $ = require('./helpers');

// FILES
// -----
const PKG = require(path.join(cwd, 'package.json'));


// ----------------------------------------------------------------------------------------------------------

var repoURL = PKG.repository.url.substring(0, PKG.repository.url.indexOf('.git')),
    repoName = $.capitalize(PKG.name.replace(/-/g, ' '));

function createChangelog(newTag, folder = 'changelog') {
    let prevTag = API.git('firstCommit'),
        tagsByMayor = API.getTags(newTag);

    return new Promise(function(resolve, reject) {
        let logFiles = [],
            logErrors = [],
            writeLogFile = null;

        for (let [version, tags] of tagsByMayor) {
            let logContent = '',
                logIndex = [],
                logDetailed = [];

            logContent = [
                `\n# ${ repoName } ${ version } ChangeLog\n`,
                `All changes commited to this repository will be documented in this file. It adheres to [Semantic Versioning](http://semver.org/).\n`,
                `<details>\n<summary>List of tags released on the ${ version } range</summary>\n`
            ].join('\n');

            for (let info of tags) {
                let link = `${ info.tag }-${ info.date }`;
                logIndex.push(`- [${ info.tag }](#${ link.replace(/\./g, '') })\n`);

                logDetailed.push(
                    `\n## [${ info.tag }](${ repoURL }/tree/${ info.tag }), ${ info.date }\n`
                    + `- [Release notes](${ repoURL }/releases/tag/${ info.tag })\n`
                    + `- [Full changelog](${ repoURL }/compare/${ prevTag }...${ info.tag })\n\n`
                );

                prevTag = info.tag;
            }

            logContent
                += `${ logIndex.reverse().join('') }</details>\n\n${ logDetailed.reverse().join('') }`
                + '\n_(File automatically generated by [`changelog.js`](../lib/changelog.js))_\n';

            writeLogFile = API.writeFile(`${ folder }/CHANGELOG-${ version.toUpperCase() }.md`, logContent);

            if (writeLogFile.result) {
                logFiles.push(writeLogFile.message);

            } else {
                reject(writeLogFile.message);
                break;
            }
        }

        if (logErrors.length === 0) {
            resolve(logFiles.join('\n'));
        }
    });
}


module.exports = createChangelog;
